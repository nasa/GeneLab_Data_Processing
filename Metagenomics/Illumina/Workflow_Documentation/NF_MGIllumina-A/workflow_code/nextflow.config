//******** Global parameters *****************//
params {

    // Input file
    // a 3-column (single-end) or 4-column (paired-end) file
    input_file = null 

    /* Run assembly-based workflow, read-based, or both
      (values need to be one of: "assembly-based", "read-based", or "both")
      It runs both by default
    */
    workflow     = "both"

    assay_suffix = "_GLmetagenomics"

    // Additional prefix to add to output files that describe more than one sample (to make them unique compared to other datasets) 
    // leave as empty, i.e. "", if not wanted, include separator at end if adding one, e.g. "Swift1S_"
    additional_filename_prefix = "" 

    publishDir_mode = "link" // "copy", "link", "symlink"	
   
    // Quality trimmed/filtered suffixes
    filtered_R1_suffix = "_R1_filtered.fastq.gz"
    filtered_R2_suffix = "_R2_filtered.fastq.gz"
    filtered_suffix    = "_filtered.fastq.gz"  // If single-end

    //-------------------------- Directories ----------------------------------//

    // Raw reads directory (can be relative to workflow directory, or needs to be full path)
    raw_reads_dir           = "../Raw_Sequence_Data/"
    // Output directories (all relative to processing directory, will be created)
    fastqc_out_dir          = "../FastQC_Outputs/"
    filtered_reads_dir      = "../Filtered_Sequence_Data/"
    assembly_based_dir      = "../Assembly-based_Processing/"
    assemblies_dir          = "../Assembly-based_Processing/assemblies/"
    genes_dir               = "../Assembly-based_Processing/predicted-genes/"
    annotations_and_tax_dir = "../Assembly-based_Processing/annotations-and-taxonomy/"
    mapping_dir             = "../Assembly-based_Processing/read-mapping/"
    combined_output_dir     = "../Assembly-based_Processing/combined-outputs/"
    bins_dir                = "../Assembly-based_Processing/bins/"
    MAGs_dir                = "../Assembly-based_Processing/MAGs/"
    read_based_dir          = "../Read-based_Processing/"
    genelab_dir             = "../GeneLab/"
    logs_dir                = "../Logs/"
    metadata_dir            = "../Metadata/" 

    //************************* Databases **********************************//
    CAT_DB_LINK      = "https://tbb.bio.uu.nl/bastiaan/CAT_prepare/CAT_prepare_20210107.tar.gz"
    GTDBTK_LINK      = "https://data.gtdb.ecogenomic.org/releases/release220/220.0/auxillary_files/gtdbtk_package/full_package/gtdbtk_r220_data.tar.gz"
    cat_db           = null            // "/path/to/Reference_DBs/CAT_prepare_20210107/"
    ko_db_dir        = null            // "/path/to/Reference_DBs/kofamscan_db/"
    metaphlan_db_dir = null            // "/path/to/Reference_DBs/metaphlan4-db/"
    chocophlan_dir   = null            // "/path/to/Reference_DBs/humann3-db/chocophlan/"
    uniref_dir       = null            // "/path/to/Reference_DBs/humann3-db/uniref/"
    utilities_dir    = null            // "/path/to/Reference_DBs/humann3-db/utility_mapping/"
    gtdbtk_db_dir    = null            // "/path/to/Reference_DBs/GTDB-tk-ref-db/"

    // Quality assessment parameters
    swift_1S       = false
    adapters       = "${projectDir}/config/bbtools_adapters.fa"
    multiqc_config = "${projectDir}/config/multiqc.config"


    // Assembly parameter
    max_mem        = 100e9 // 100GB

    // Binning parameter
    reduced_tree   = "True"

    // Annotation parameters
    pileup_mem     = "5g" // pileup.sh paramater for calculating contig coverage and depth
    block_size     = 4  // CAT blocksize

    //********************  CAT database directory strings ************************//
    // The strings below will be added to the end of the "cat_db" parameter provided above
    // cat taxonomy directory with cat_db path provided above
    cat_taxonomy_dir = "2021-01-07_taxonomy/"
    cat_db_sub_dir   = "2021-01-07_CAT_database/"

    // MAG parameters
    min_est_comp       = 90  // Minimum estimated completeness
    max_est_redund     = 10  // Maximum estimated redundancy
    max_est_strain_het = 50  // Maximum estimated strain heterogeneity

    /*
    Scratch directory for gtdb-tk, if wanting to use disk space instead of RAM, can be memory intensive;
    see https://ecogenomics.github.io/GTDBTk/faq.html#gtdb-tk-reaches-the-memory-limit-pplacer-crashes
    leave empty if wanting to use memory, the default, put in quotes the path to a directory that 
    already exists if wanting to use disk space
    */

    use_gtdbtk_scratch_location = false


    // Specify paths to existing conda environments
    conda_genelab      = null          // "/path/to/envs/genelab-utils"
    conda_qc           = null          // "/path/to/envs/qc"
    conda_humann3      = null          // "/path/to/envs/humann3"
    conda_cat          = null          // "/path/to/envs/genelab-utils/envs/CAT"
    conda_prodigal     = null          // "/path/to/envs/prodigal"
    conda_metabat      = null          // "/path/to/envs/metabat"
    conda_gtdbtk       = null          // "/path/to/envs/gtdbtk"
    conda_kegg_decoder = null          // "/path/to/envs/kegg_decoder"
    conda_megahit      = null          // "/path/to/envs/megahit"
    conda_bit          = null          // "/path/to/envs/bit"
    conda_kofamscan    = null          // "/path/to/envs/kofamscan"
    conda_mapping      = null          // "/path/to/envs/mapping"
    conda_checkm       = null          // "/path/to/envs/checkm"

    accession          = null // GLDS or OSD acession number for the data to be processed
    // Pattern of files on OSDR for the GLDS_accession you want to process.
    RawFilePattern     = null // "_metaG", "_HRremoved"
    errorStrategy      = "terminate" // nextflow's error handling strategy
    debug              = false // should info about the parameters set by the user be shown when the workflow starts.
}

// Setting the default container engine to singularity
params.containerEngine = "singularity"
// Conda shouldn't be used by default except when using conda-based profiles
params.use_conda = false



/*******************************************************************************************************
*************************************** Workflow Profiles **********************************************
********************************************************************************************************/

profiles {

    slurm {
         process.executor     = 'slurm' 
     }

    conda {   
        conda.enabled          = true
        params.use_conda       = true
        conda.channels         = 'conda-forge,bioconda' 
        conda.cacheDir         = 'conda/' // location of conda environments
        conda.createTimeout    = '2h'              
    }

    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        conda.channels         = 'conda-forge,bioconda'
        params.use_conda       = true
        conda.cacheDir         = 'conda/' // location of conda environments
        conda.createTimeout    = '2h'
    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true

        /* Uncomment the line below  if you'd like to set the cache directory here,
         as setting it here takes precedence over setting the nextflow variable
        NXF_SINGULARITY_CACHEDIR=singularity/ in your run script
        */
        //singularity.cacheDir   = "singularity/" // location of singularity images
        params.containerEngine = "singularity"
    }

    docker {
        docker.enabled         = true
        docker.runOptions      = '-u $(id -u):$(id -g)'
        params.containerEngine = "docker"
    }

}

// Maximum number of jobs to submit in parallel
executor.queueSize = 20

/* 
    Root directory where the databases will be downloaded if they don't exist.
    This should be provided as a full path (starting with '/').
    Note that relative paths such as '~/' and '../' are not expanded
    by nextflow's evaluation of files, so don't use thosee.
*/ 
params.DB_ROOT = "${launchDir.getParent()}/Reference_DBs"

// Mount Humann databases to their predefined locations in the Biobakery container being used
if(params.chocophlan_dir == null || params.uniref_dir == null || params.metaphlan_db_dir == null || params.utilities_dir == null) {

    utilities = "${params.DB_ROOT}/humann3-db/utility_mapping/:/usr/local/lib/python3.6/dist-packages/humann/data/misc"

}else{

    utilities = "${params.utilities_dir}:/usr/local/lib/python3.6/dist-packages/humann/data/misc"
}


/******************************************************************************************************************
***************** Tune process specific resources (cpu, container, memory etc.) ***********************************
*******************************************************************************************************************/

process {

    //******************* Default process settings ************************//
    errorStrategy = { params.errorStrategy  ? params.errorStrategy : "ignore"}
    queue = "normal,priority"
    maxRetries = 2
    memory = '5 GB'
    cache = 'lenient'
    cpus = 8

    /*********************************************************************************************
    ******************************** Process Specific Settings  **********************************
    *********************************************************************************************/
    
    //************************* Generic process labels used throughout the workflow  ****************// 

    withLabel: genelab {
              
                  conda = {params.conda_genelab ? params.conda_genelab : "${projectDir}/envs/genelab.yaml"}
                  container = "olabiyi/genelab-utils:1.3.22"
            }


    withLabel: bit {
                  cpus = 2
                  conda = {params.conda_bit ? params.conda_bit : "${projectDir}/envs/bit.yaml"}
                  container = "olabiyi/bit-astrobiomike:1.0"
                  memory = "5 GB"
            }

//*************************************** Database set-up ********************************************//
    withLabel: humann_setup {
                  conda = {params.conda_humann3 ? params.conda_humann3 : "${projectDir}/envs/humann3.yaml"}
                  container = "biobakery/humann:3.9"
            }

    withName: SETUP_METAPHLAN {
                  memory = "100 GB"
            }


    withLabel: db_setup {
                  storeDir = "${params.DB_ROOT}/"
            }

    withName: SETUP_CAT_DB {
                  conda = {params.conda_cat ? params.conda_cat : "${projectDir}/envs/cat.yaml"}
                  container = "olabiyi/bit-astrobiomike:1.0"
            }

    withName: SETUP_KOFAMSCAN_DB {
                  conda = {params.conda_kofamscan ? params.conda_kofamscan : "${projectDir}/envs/kofamscan.yaml"}
                  container = "olabiyi/bit-astrobiomike:1.0"
            }

    withName: SETUP_GTDBTK_DB {
                  conda = {params.conda_gtdbtk ? params.conda_gtdbtk : "${projectDir}/envs/gtdb-tk.yaml"}
                  container =  "quay.io/biocontainers/gtdbtk:2.4.0--pyhdfd78af_1"
            }

//************************* GLDS_accession runsheet and input file retrieval  **************************************//
    withName: GET_RUNSHEET {
                  cpus = 10
                  conda = {params.conda_genelab ? params.conda_genelab : "${projectDir}/envs/genelab.yaml"}
                  container = "olabiyi/genelab-utils:1.3.22"
                  publishDir = [path: params.genelab_dir , mode: params.publishDir_mode]
            }

//********************************** Read quality control and assesment ********************************************//
    withName: FASTQC {
                  conda = {params.conda_qc ? params.conda_qc : "${projectDir}/envs/qc.yaml"}
                  container = "staphb/fastqc:0.12.1"
                  cpus = 2
                  publishDir = [path: params.raw_reads_dir, mode: params.publishDir_mode]
            }

    withName: MULTIQC {
                  conda = {params.conda_qc ? params.conda_qc: "${projectDir}/envs/qc.yaml"}
                  container = "staphb/multiqc:1.19"
                  cpus = 2
                  publishDir = [path: params.fastqc_out_dir, mode: params.publishDir_mode]
          }

    withName: BBDUK {
                  conda = {params.conda_qc ? params.conda_qc: "${projectDir}/envs/qc.yaml"}
                  container = "staphb/bbtools:38.86"
                  cpus = 5
                  memory = "40 GB"
                  publishDir = [[path: params.filtered_reads_dir, pattern: "*${params.filtered_suffix}" , mode: params.publishDir_mode],
                                [path: params.logs_dir, pattern: "*-bbduk.log" , mode: params.publishDir_mode]]
            }


//************************************ Read-based processing *********************************************************//

   withLabel: read_based {
              conda = {params.conda_humann3 ? params.conda_humann3 : "${projectDir}/envs/humann3.yaml"}
              container = "biobakery/humann:3.9"
           }
     

   withLabel: read_based_outputs {
              publishDir = [path: params.read_based_dir, mode: params.publishDir_mode]
           }


    withName: HUMANN {
               cpus = 8
               memory = "100 GB"
            }

    withName: GEN_READ_BASED_PROCESSING_KO_TABLE {
               containerOptions = { params.containerEngine == "singularity" ? "-B ${utilities}" : "-v ${utilities}"}
            }


//*************************************** Assembly-based proessing **************************************************//

    withLabel: assembly {
               publishDir = [path: params.assemblies_dir, mode: params.publishDir_mode]
              }

    withName: ASSEMBLE {
                  conda = {params.conda_megahit ? params.conda_megahit : "${projectDir}/envs/megahit.yaml"}
                  container = "biocontainers/megahit:1.2.9_cv1"
                  cpus = 8
                  memory = "20 GB"
                  publishDir = [path: params.logs_dir, pattern: "*-assembly.log", mode: params.publishDir_mode]
            }

    withName: RENAME_HEADERS{

              publishDir = [path: params.assemblies_dir, pattern: "*-assembly.fasta" , mode: params.publishDir_mode]

            }


    withLabel: mapping {
                  conda = {params.conda_mapping ? params.conda_mapping : "${projectDir}/envs/mapping.yaml"}
                  cpus = 8
                  //errorStrategy = 'retry'
                  //maxRetries = 2
                  memory = "20 GB" // {20.GB * task.attempt}
            }

    withName: MAPPING {
                  container = "biocontainers/bowtie2:v2.4.1_cv1"
                  publishDir = [path: params.mapping_dir, pattern: "*-mapping-info.txt", mode: params.publishDir_mode]
            }

    withName: SAM_TO_BAM {
                  container = "staphb/samtools:1.20"
                  publishDir = [path: params.mapping_dir, mode: params.publishDir_mode]
            }

    withName: CALL_GENES {
                  conda = {params.conda_prodigal ? params.conda_prodigal : "${projectDir}/envs/prodigal.yaml"}
                  container = "quay.io/biocontainers/prodigal:2.6.3--h031d066_8"
                  cpus = 8
                  publishDir = [path: params.genes_dir, pattern: "*-genes.gff", mode: params.publishDir_mode]
            }
    
    withLabel: call_genes {
               publishDir = [path: params.genes_dir, mode: params.publishDir_mode]
            }

    withLabel: contig_annotation {
               publishDir = [path: params.annotations_and_tax_dir, mode: params.publishDir_mode]
            }

    withName: KO_ANNOTATION {
                  conda = {params.conda_kofamscan ? params.conda_kofamscan : "${projectDir}/envs/kofamscan.yaml"}
                  container = "quay.io/biocontainers/kofamscan:1.3.0--hdfd78af_2"
                  cpus = 8
                  memory = "10 GB"
                  disk = "20 GB"
            }

    withName: TAX_CLASSIFICATION {
                  conda = {params.conda_cat ? params.conda_cat : "${projectDir}/envs/cat.yaml"}
                  container = "nanozoo/catbat:5.2.3--e9c0a44" 
                  cpus = 8
                  memory = "50 GB"
                  disk = "100 GB"
            }

    withName: GET_COV_AND_DET {
                  conda = {params.conda_mapping ? params.conda_mapping : "${projectDir}/envs/mapping.yaml"}
                  container = "staphb/bbtools:38.86"
                  cpus = 8
                  memory = "20 GB"
                  publishDir = [path: params.mapping_dir, mode: params.publishDir_mode]
            }

    withLabel: combine_outputs {
                  publishDir = [path: params.combined_output_dir, mode: params.publishDir_mode]
            }


    withName: METABAT_BINNING {
                  conda = {params.conda_metabat ? params.conda_metabat : "${projectDir}/envs/metabat.yaml"}
                  container = "nanozoo/metabat2:2.15--c1941c7"
                  cpus = 8
                  publishDir = [path: params.mapping_dir, mode: params.publishDir_mode, pattern: "*-metabat-assembly-depth.tsv"]
            }

    withLabel: bins {
            publishDir = [path: params.bins_dir, mode: params.publishDir_mode]
            } 

    withName: ZIP_BINS {
              publishDir = [path: params.bins_dir, mode: params.publishDir_mode]
            }

     withName: "CHECKM_ON_BIN|COMBINE_CHECKM" {
                  conda = {params.conda_checkm ? params.conda_checkm : "${projectDir}/envs/checkm.yaml"}
                  container = "nanozoo/checkm:1.1.3--c79a047"
                  cpus = 8
                  memory = "50 GB"
                  disk = "50 GB"
            }

    withLabel: mags {
            publishDir = [path: params.MAGs_dir, mode: params.publishDir_mode]
            }

    withName: ZIP_MAGS {
              publishDir = [path: params.MAGs_dir, mode: params.publishDir_mode]
            }


    withName: GTDBTK_ON_MAGS {
                  conda = {params.conda_gtdbtk ? params.conda_gtdbtk : "${projectDir}/envs/gtdb-tk.yaml"}
                  container =  "quay.io/biocontainers/gtdbtk:2.4.0--pyhdfd78af_1"
                  containerOptions = { params.containerEngine == "singularity" ? "-B \${PWD}:/data -B ${gtdbtk_db_dir}:/refdata" : "-v \${PWD}:/data -v ${gtdbtk_db_dir}:/refdata" } 
                  cpus = 8
                  memory = "600 GB"
                  disk = "700 GB"
            }

    withName:  SUMMARIZE_MAG_KO_ANNOTS_WITH_KEGG_DECODER {
                  conda = {params.conda_kegg_decoder ? params.conda_kegg_decoder : "${projectDir}/envs/keggdecoder.yaml"}
                  container = "fmalmeida/keggdecoder:latest"
                  cpus = 8
            }

    withName:  GENERATE_ASSEMBLY_PROCESSING_OVERVIEW_TABLE {
                 publishDir = [path: params.assembly_based_dir, mode: params.publishDir_mode]
            }

}


/*****************************************************************************
********************** Workflow Resource Usage Capturing *********************
******************************************************************************/

// Adapted from : https://github.com/nf-core/rnaseq/blob/master/nextflow.config
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "../Resource_Usage/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "../Resource_Usage/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "../Resource_Usage/execution_trace_${trace_timestamp}.txt"
}



/******************************************************************************
**************************** Workflow Metadata ********************************
*******************************************************************************/

manifest {
    author = 'Olabiyi Aderemi Obayomi, Mike Douglas Lee'
    homePage = 'https://github.com/nasa/GeneLab_Data_Processing/blob/master/Metagenomics/'
    description = 'Metagenomics workflow for pipeline document GL-DPPD-7107-A'
    mainScript = 'main.nf'
    defaultBranch = 'main'
    nextflowVersion = '>=24.04.4'
    version = '1.0.0'
}
