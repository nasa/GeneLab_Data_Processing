
params {

    //---------- Required parameters -----------------------------//
    csv_file = "${baseDir}/file.csv" // A 2-column input file ["sample_id", "read"]
    publishDir_mode = "link" // "link" , "copy"
    // Cutadapt parameters
    F_primer = "AGAGTTTGATCCTGGCTCAG"
    R_primer = "GCTGCCTCCCGTAGGAGT" 
    // BBDUK parameters
    // minimum length threshold for bbduk
    min_bbduk_len = 50
    // bbduk minimum average quality
    min_bbduk_avg_quality = 15    
    target_region = "16S" // "16S", "ITS"

    //----------------------- Optional parameters ------------------------------------//
    // Suffixes
    primer_trimmed_suffix = "_trimmed.fastq.gz"
    filtered_suffix = "_filtered.fastq.gz"
    // Directories
    raw_reads_dir = "${baseDir}/Raw_Sequence_Data/"
    fastqc_out_dir = "${baseDir}/FastQC_Outputs/"
    trimmed_reads_dir = "${baseDir}/Trimmed_Sequence_Data/"
    filtered_reads_dir = "${baseDir}/Filtered_Sequence_Data/"
    final_outputs_dir = "${baseDir}/Final_Outputs/"
    // Genelab specific parameters
    assay_suffix = "GLAmpSeq"
    output_prefix = ""

    // Specify paths to existing conda environments else leave as is so that
    //  new conda environements will be created if `-profile conda|slurm_conda` is used to run the pipeline
    conda{
          qc = false
          R = false
          bbmap = false
          cutadapt = false
          vsearch = false
      }
}


profiles {

    slurm_sing {
        process.executor = 'slurm'
        process.queue = "normal,priority"
        //process.queueSize = 32 // how many jobs should be submitted at once
        singularity.enabled    = true
        singularity.autoMounts = true
        singularity.cacheDir = "singularity/"
    }

    slurm_conda {
        process.executor = 'slurm'
        process.queue = "normal,priority"       
        conda.enabled = true             
    }

    conda {
        conda.enabled = true       
    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        singularity.cacheDir = "singularity/"
    }

    docker {
        docker.enabled         = true
        docker.runOptions      = '-u $(id -u):$(id -g)'
        docker.userEmulation   = true
    }


}


process {

    // "ignore" will ignore errors while "retry" will retry the failed task as many times as specified by maxRetries below
    //errorStrategy = "ignore" // "retry" // uncoment to debug. 
    //maxRetries = 2 // uncomment if you'd like to retry a failed task.
    cpus = 2
    memory = '5 GB'
    cache = 'lenient'
    //debug = true  // uncomment to see what is being emitted to the standard output


    withLabel: fastqc {
                  conda = {params.conda.qc ? params.conda.qc : "envs/qc.yaml"}
                  container = "staphb/fastqc:0.12.1"
            }

    withName: RAW_FASTQC {                  
                  publishDir = [path: params.raw_reads_dir, mode: params.publishDir_mode]
            }

    withName: "RAW_MULTIQC|FILTERED_MULTIQC" {
                  conda = {params.conda.qc ? params.conda.qc : "envs/qc.yaml"}
                  container = "staphb/multiqc:1.19"
                  publishDir = [path: params.fastqc_out_dir, mode: params.publishDir_mode]
            }

    withName: "CUTADAPT|COMBINE_CUTADAPT_LOGS_AND_SUMMARIZE" {
                  conda = {params.conda.cutadapt ?  params.conda.cutadapt : "envs/cutadapt.yaml"}
                  container = "zavolab/cutadapt:1.16"
                  publishDir = [path: params.trimmed_reads_dir, mode: params.publishDir_mode]
            }
           
    withName: "BBDUK|COMBINE_BBDUK_LOGS_AND_SUMMARIZE" {
                  conda = {params.conda.bbmap ?  params.conda.bbmap : "envs/bbmap.yaml"}
                  container = "staphb/bbtools:38.86"
                  memory = "20 GB"
                  cpus = 5
                  publishDir = [path: params.filtered_reads_dir, mode: params.publishDir_mode]
            }
           
    withName: FILTERED_FASTQC {
                  publishDir = [path: params.filtered_reads_dir, mode: params.publishDir_mode ]
            } 


    withLabel: vsearch {
                  conda = {params.conda.vsearch ? params.conda.vsearch : "envs/vsearch.yaml"}
                  container = "quay.io/biocontainers/vsearch:2.15.2--h2d02072_0"
                  memory = '100 GB'
                  cpus = 10
            }

    withName: VSEARCH_PROCESS_ALL {
                publishDir = [path: params.final_outputs_dir, 
                              pattern: "${params.output_prefix}counts${params.assay_suffix}.tsv", 
                              mode: params.publishDir_mode]
            }
    
    withName: REMOVE_LINE_WRAPS {
                conda = {params.conda.vsearch ? params.conda.vsearch : "envs/vsearch.yaml"}
                container = "olabiyi/bit-astrobiomike:1.0"
                memory = "5 GB"
                cpus = 2
                publishDir = [path: params.final_outputs_dir, mode: params.publishDir_mode]
            }

    withName: RUN_R {
                  conda = {params.conda.R ?  params.conda.R : "envs/R.yaml"}
                  container = "olabiyi/r-dada-decipher-biomformat:1.0"
                  memory = "100 GB"
                  cpus = 10
                  publishDir = [path: params.final_outputs_dir , pattern: "Final_Outputs/*.{tsv,biom}", 
                                mode: params.publishDir_mode, saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1)} ] 
          }

    withName: ZIP_BIOM {
                  conda = {params.conda.qc ? params.conda.qc : "envs/qc.yaml"}
                  container = "staphb/multiqc:1.19"
                  publishDir = [path: params.final_outputs_dir, mode: params.publishDir_mode]
            }

}



// Adapted from : https://github.com/nf-core/rnaseq/blob/master/nextflow.config
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.final_outputs_dir}/Resource_Usage/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.final_outputs_dir}/Resource_Usage/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.final_outputs_dir}/Resource_Usage/execution_trace_${trace_timestamp}.txt"
}


manifest {
    author = 'Olabiyi Aderemi Obayomi, Mike Douglas Lee'
    homePage = 'https://github.com/nasa/GeneLab_Data_Processing/blob/master/Amplicon/'
    description = 'GeneLab bioinformatics processing pipelines for amplicon sequencing data'
    mainScript = 'main.nf'
    defaultBranch = 'main'
    nextflowVersion = '>=22.10.1'
    version = '1.0.0'
}


