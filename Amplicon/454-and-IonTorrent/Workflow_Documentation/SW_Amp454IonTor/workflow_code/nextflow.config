//******** Global parameters *****************//
params {

    //---------- Required parameters -----------------------------//
    csv_file = "file.csv" // A 2-column input file ["sample_id", "read"]
    publishDir_mode = "link" // "link" , "copy"
    // Cutadapt parameters
    F_primer = ""
    R_primer = "" 

    // BBDUK parameters
    min_bbduk_len         = 50 // minimum length threshold for bbduk
    min_bbduk_avg_quality = 15 // bbduk minimum average quality   

    target_region = "16S" // options are ["16S", "ITS"]

    //----------------------- Optional parameters ------------------------------------//
    // Suffixes
    primer_trimmed_suffix = "_trimmed.fastq.gz"
    filtered_suffix       = "_filtered.fastq.gz"
    // Directories
    raw_reads_dir         = "../Raw_Sequence_Data/"
    fastqc_out_dir        = "../FastQC_Outputs/"
    trimmed_reads_dir     = "../Trimmed_Sequence_Data/"
    filtered_reads_dir    = "../Filtered_Sequence_Data/"
    final_outputs_dir     = "../Final_Outputs/"
    metadata_dir          = "../Metadata/"
    genelab_dir           = "../GeneLab/"



    // Specify paths to existing conda environments (/path/to/envs/qc) else leave as is so that
    //  new conda environements will be created if `-profile conda` is used to run the pipeline
    conda{
          qc       = null            // /path/to/envs/qc
          R        = null            // /path/to/envs/R
          bbmap    = null            // /path/to/envs/bbmap
          cutadapt = null            // /path/to/envs/cutadapt
          vsearch  = null            // /path/to/envs/vsearch
          genelab  = null            // /path/to/envs/genelab
      }

    // Genelab specific parameters
    assay_suffix = "_GLAmpSeq"
    output_prefix = ""
    GLDS_accession = false // OSD acession number for the data to be processed
    // Pattern of files on OSDR for the GLDS_accession you want to process.
    RawFilePattern = null // e.g. "_Amplicon_"


    errorStrategy = "terminate" // how should errors be handled by nextflow.
    debug = false // should a detailed log of set parameters be shown before workflow execution.
}


// Setting the default container engine as singularity
params.containerEngine = "singularity"
// Conda shouldn't be used be default except when using conda-based profiles
// i.e., slurm_conda and conda
params.use_conda = false

/*******************************************************************************************************
*************************************** Workflow Profiles **********************************************
********************************************************************************************************/

profiles {

    slurm {
        process.executor          = 'slurm'
    }

    conda {
        conda.enabled             = true
        params.use_conda          = true         
    }

    singularity {
        singularity.enabled       = true
        singularity.autoMounts    = true
        singularity.cacheDir      = "singularity/"
        params.containerEngine    = "singularity"
    }

    docker {
        docker.enabled            = true
        docker.runOptions         = '-u $(id -u):$(id -g)'
        docker.userEmulation      = true
        params.containerEngine    = "docker"
    }

}

// Number of jobs to run in parallel
executor.queueSize = 20

/******************************************************************************************************************
***************** Tune process specific resources (cpu, container, memory etc.) ***********************************
*******************************************************************************************************************/

process {

     /******************* Default process settings ************************//

    // "ignore" will ignore errors while "retry" will retry the failed task as many times as specified by maxRetries below
    errorStrategy = { params.errorStrategy  ? params.errorStrategy : "ignore"}
    //maxRetries = 2 // uncomment if you'd like to retry a failed task.
    cpus = 2
    memory = '5 GB'
    cache = 'lenient'
    //debug = true  // uncomment to see what is being emitted to the standard output

    /*********************************************************************************************
    ******************************** Process Specific Settings  **********************************
    *********************************************************************************************/

//************************* GLDS_accession runsheet and input file retrieval  **************************************//

    withName: GET_RUNSHEET {
                  conda = {params.conda.genelab != null ? params.conda.genelab : "envs/genelab.yaml"}
                  container = "olabiyi/genelab-utils:1.3.22"
                  publishDir = [path: params.genelab_dir, mode: params.publishDir_mode]
            }

//********************************** Read quality control and assesment ********************************************//
    withLabel: fastqc {
                  conda = {params.conda.qc != null ? params.conda.qc : "envs/qc.yaml"}
                  container = "staphb/fastqc:0.12.1"
            }

    withName: RAW_FASTQC {                  
                  publishDir = [path: params.raw_reads_dir, mode: params.publishDir_mode]
            }

    withName: "RAW_MULTIQC|FILTERED_MULTIQC" {
                  conda = {params.conda.qc != null ? params.conda.qc : "envs/qc.yaml"}
                  container = "staphb/multiqc:1.19"
                  publishDir = [path: params.fastqc_out_dir, mode: params.publishDir_mode]
            }

    withName: "CUTADAPT|COMBINE_CUTADAPT_LOGS_AND_SUMMARIZE" {
                  conda = {params.conda.cutadapt != null ?  params.conda.cutadapt : "envs/cutadapt.yaml"}
                  container = "zavolab/cutadapt:1.16"
                  publishDir = [path: params.trimmed_reads_dir, mode: params.publishDir_mode]
            }
           
    withName: "BBDUK|COMBINE_BBDUK_LOGS_AND_SUMMARIZE" {
                  conda = {params.conda.bbmap != null ?  params.conda.bbmap : "envs/bbmap.yaml"}
                  container = "staphb/bbtools:38.86"
                  memory = "20 GB"
                  cpus = 5
                  publishDir = [path: params.filtered_reads_dir, mode: params.publishDir_mode]
            }
           
    withName: FILTERED_FASTQC {
                  publishDir = [path: params.filtered_reads_dir, mode: params.publishDir_mode ]
            } 

//******************************** OTU Picking with VSEARCH  **************************************//
    withLabel: vsearch {
                  conda = {params.conda.vsearch != null ? params.conda.vsearch : "envs/vsearch.yaml"}
                  container = "quay.io/biocontainers/vsearch:2.15.2--h2d02072_0"
                  memory = '100 GB'
                  cpus = 10
            }

    withName: VSEARCH_PROCESS_ALL {
                publishDir = [path: params.final_outputs_dir, 
                              pattern: "${params.output_prefix}counts${params.assay_suffix}.tsv", 
                              mode: params.publishDir_mode]
            }
    
    withName: REMOVE_LINE_WRAPS {
                conda = {params.conda.vsearch != null ? params.conda.vsearch : "envs/vsearch.yaml"}
                container = "olabiyi/bit-astrobiomike:1.0"
                memory = "5 GB"
                cpus = 2
                publishDir = [path: params.final_outputs_dir, mode: params.publishDir_mode]
            }

    withName: RUN_R {
                  conda = {params.conda.R != null ?  params.conda.R : "envs/R.yaml"}
                  container = "olabiyi/r-dada-decipher-biomformat:1.0"
                  memory = "100 GB"
                  cpus = 10
                  publishDir = [path: params.final_outputs_dir , pattern: "Final_Outputs/*.{tsv,biom}", 
                                mode: params.publishDir_mode, saveAs: { fn -> fn.substring(fn.lastIndexOf('/')+1)} ] 
          }

    withName: ZIP_BIOM {
                  conda = {params.conda.qc != null ? params.conda.qc : "envs/qc.yaml"}
                  container = "staphb/multiqc:1.19"
                  publishDir = [path: params.final_outputs_dir, mode: params.publishDir_mode]
            }

}


/*****************************************************************************
********************** Workflow Resource Usage Capturing *********************
******************************************************************************/

// Adapted from : https://github.com/nf-core/rnaseq/blob/master/nextflow.config
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "../Resource_Usage/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "../Resource_Usage/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "../Resource_Usage/execution_trace_${trace_timestamp}.txt"
}


/******************************************************************************
**************************** Workflow Metadata ********************************
*******************************************************************************/

manifest {
    author = 'Olabiyi Aderemi Obayomi, Mike Douglas Lee'
    homePage = 'https://github.com/nasa/GeneLab_Data_Processing/blob/master/Amplicon/'
    description = '454 Ion Torrent workflow for pipeline document GL-DPPD-7106'
    mainScript = 'main.nf'
    defaultBranch = 'main'
    nextflowVersion = '>=22.10.1'
    version = '1.0.0'
}


