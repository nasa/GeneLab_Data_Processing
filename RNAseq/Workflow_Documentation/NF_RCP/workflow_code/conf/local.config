/*
----------------------------------------------------------------------------------------
    GeneLab Data Processing RNA-Seq Workflow Nextflow config file
----------------------------------------------------------------------------------------
    Config file for local executor
----------------------------------------------------------------------------------------
*/

process {

    executor='local' // run using slurm backend (unless a process specifies otherwise), Nextflow will generate the sbatch script and submit for you RESET TO SLURM AFTER TESTING
    cpus   = { 2      * task.attempt } // Default
    memory = { 6.GB   * task.attempt } // Default

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withName:'GET_ACCESSIONS|FETCH_ISA|ISA_TO_RUNSHEET|PARSE_ANNOTATIONS_TABLE|COPY_READS|GET_MAX_READ_LENGTH|ADD_GENE_ANNOTATIONS|EXTEND_DGE_TABLE|VV_RAW_READS|GET_GTF_FEATURES|REMOVE_RRNA_FEATURECOUNTS|GENERATE_MD5SUMS|UPDATE_ASSAY_TABLE|GENERATE_PROTOCOL|GTF_TO_BED|QUANTIFY_FEATURECOUNTS_GENES|TRUNCATE_RUNSHEET|PUBLISH_STAGED_ANALYSIS' {
        cpus   = { 1                    }
        memory = { 2.GB                 }
    }
    withName:'RAW_FASTQC|TRIMMED_FASTQC' {
        cpus   = { 2     * task.attempt }  // used 198 cpu. to do: compare 4
        memory = { 4.GB  * task.attempt }
    }
    withName:TRIMGALORE {
        // see https://github.com/FelixKrueger/TrimGalore/blob/master/Docs/Trim_Galore_User_Guide.md
        cpus   = { 8    * task.attempt  }  // 1 ->16, use 662.5 cpu: compare 8
        memory = { 2.GB                 }
    }
    withName:BUILD_STAR_INDEX {
        cpus   = { 16    * task.attempt }
        memory = { 72.GB * task.attempt }
    }
    withName:ALIGN_STAR {
        cpus   = { 8                    }
        memory = { 72.GB * task.attempt }
        errorStrategy = { 
            [137].contains(task.exitStatus) ? 'retry' : 'terminate' 
        }
    }
    withName:BUILD_BOWTIE2_INDEX {
        cpus   = { 8     * task.attempt }
        memory = { 32.GB * task.attempt }
    }
    withName:ALIGN_BOWTIE2 {
        cpus   = { 4     * task.attempt }
        memory = { 16.GB * task.attempt }
    }
    withName:INFER_EXPERIMENT {
        cpus   = { 2    * task.attempt }
        memory = { 2.GB * task.attempt }
    }
    withName:GENEBODY_COVERAGE {
        // To do: compare duration
        cpus   = { 2    * task.attempt }
        memory = { 4.GB * task.attempt }
    }
    withName:INNER_DISTANCE {
        // To do: test mem >2
        cpus   = { 6    * task.attempt }
        memory = { 36.GB * task.attempt }
    }
    withName:READ_DISTRIBUTION {
        // To do: test 2, 1-2gb
        cpus   = { 2    * task.attempt }
        memory = { 2.GB * task.attempt }
    }
    withName:ASSESS_STRANDEDNESS {
        cpus   = { 2    * task.attempt }
        memory = { 2.GB * task.attempt }
    }
//    withName:'QUALIMAP_BAM_QC|QUALIMAP_RNASEQ_QC' {
//        cpus   = { 8     * task.attempt }
//        memory = { 32.GB * task.attempt }
//    }
    withName:BUILD_RSEM_INDEX {
        cpus   = { 16    * task.attempt }
        memory = { 72.GB * task.attempt }
    }
    withName:COUNT_ALIGNED {
        // To do: Optimize memory setting
        cpus   = { 12    * task.attempt }
        memory = { 72.GB * task.attempt }
    }
    withName:DGE_DESEQ2 {
        // To do: Optimize both settings, large dataset wald
        cpus   = { 4     * task.attempt }
        memory = { 16.GB * task.attempt }
    }
    withName:SORT_AND_INDEX_BAM {
        cpus   = { 4     * task.attempt }
        memory = { 16.GB * task.attempt }
    }
//    withName:SAMTOOLS_STATS {
//        cpus   = { 1     * task.attempt }
//        memory = { 6.GB  * task.attempt }
//    }
    withName:FEATURECOUNTS {
        cpus   = { 8     * task.attempt }
        memory = { 32.GB  * task.attempt }
    }
    withLabel:medium_memory {
        memory = { 36.GB * task.attempt }
    }
    withLabel:high_memory {
        memory = { 72.GB * task.attempt }
    }
    withLabel:medium_cpu_memory {
        cpus   = { 16     * task.attempt }
        memory = { 32.GB * task.attempt }
    }
    withLabel:low_cpu_memory {
        cpus   = { 4     * task.attempt }
        memory = { 8.GB * task.attempt }
    }
    withLabel:low_cpu_med_memory {
        cpus   = { 4     * task.attempt }
        memory = { 8.GB * task.attempt }
    }
}

//set the above to 6 cpu and 32GB memory
executor { // entire executor scope parameters. I.E. parameters that define how an entire executor should operate
    // Refers to jobs launched via the slurm executor 
    $slurm {
        queueSize = 4
    }
}